手動で問題をhtmlに書き足すのはシンドイので、ディレクトリ構造を用意して、そこからhuman readableな感じに変換するプログラムを用意するのが良さそうですね。

できるだけ簡素な仕様にするのが良さそう。

案: こういうディレクトリ構造を作って、問題とジャッジを収録した静的ページを/docs/に生成する。

root/
├── builder.py
├── resources/
│   ├── problems/
│   │   ├── problem1/
│   │   │   ├── config.json
│   │   │   ├── input.txt
│   │   │   ├── answer.txt
│   │   │   └── judge.js
│   │   ├── problem2/
│   │   │   ├── config.json
│   │   │   ├── input.txt
│   │   │   └── answer.txt
│   │   ├── problem3/
│   │   │   ├── config.json
│   │   │   ├── input.txt
│   │   │   ├── answer.txt
│   │   │   └── judge.js
├── docs/

configの内容
- title: string
- problemStatement: string
- inputDescription: string
- useInput: bool
- outputDescription: string
- moreInformation: string
- useSpecialJudge: bool

judge.jsの内容
    無名関数を書く。ユーザーの提出したテキスト、インプット、アウトプット、書き換えていいhtmlが渡される。
    なければ空文字列を渡す。
    ジャッジはhtmlに詳細情報を出力することが許可される。
    返り値は正答かどうかのbool値

(userinput, input, answer, htmlelement) => {
    return bool;
};








builderの実装

流石にスクリプトの域を超えているので、モジュール分割する。
どういうことができるべきか？をベースにオブジェクトを組み立てていく。
基本は委譲のパターンでやる。
作ってて気がついたけど、自分の仕事をするために他のメンバの情報が必要な場合がある。これをやりだすと指数的に面倒さが増加するので、Problemはあくまで一つの問題ディレクトリに関する情報を提供するハブみたいにして、これ以上の詳細なアサートとかはより上のレイヤで処理したい。

class Problem
-> 期待される振る舞い
    - 各種ファイルの自動存在チェック + 内容の読み取り(必須ファイル/必須内容がなければ例外送出)
    - json -> 各項目を関数としてreadonlyで提供
    - input/answer/judge -> strを返却

    実現のために、以下のクラスを用意
    class ProblemConfig
    class ProblemInput
    class ProblemAnswer
    class ProblemJudge


ProblemConfigを実装した。
    config.jsonはオブジェクトを仮定。
    そのJSON_CONTENTSに定義されているメンバがなかったり、型が違ったらassertで落とすようにしてる。(エラーメッセージを作るのめんどい。)
    get_〇〇メソッドを実装。
    Problem側から同名で呼んで、実装は委譲してる。(具体的なプロパティ名を隠蔽した。)

ProblemInput、ProblemAnswer、ProblemJudgeも実装した。それぞれ呼び出すとテキストを返すメソッドだけ生えてる。

chatGPTと相談してリファクタリング。以下を改善。
- ProblemConfigへの依存が強すぎるので、メンバの実際の名前定数をProblem側へ移動して、ProblemConfig側はそれを使ってassertする。ProblemConfig側は渡された名前のフィールドを返す関数だけにして、Problem側で仕事を割り振る。
定数をインポートしていたら循環してしまったので、constants.pyを定義してそこに全部おいた。


現状、Problemクラスは以下のメソッドを提供している。
def __init__ (self, dir_path):
def get_title (self):
def get_problem_statement (self):
def get_input_description (self):
def get_has_input (self):
def get_has_answer (self):
def get_output_description (self):
def get_more_information (self):
def get_use_special_judge (self):
def get_input_text (self):
def get_answer_text (self):
def get_judge_code (self):

main関数を実装していく。loggerを用意した。
loggerを用意した関係上、assertで落としていた例外を一部捕まえたい。
-> https://qiita.com/airis_hirow/items/303bec11a8ae041101ac
traceback.format_exc()を利用してloggerから出力する。sys.exit(1)で落とすのは変わらない。

よく考えると、入力も与えられるかわからないのでhas_input関数を追加した。
chatGPTと協議の末、builder_utilsにhtmlgeneratorを追加する方針をとることにした。
Problemはもうインターフェースとして使うことにして、引数でproblemを受け取る。

いままで成果物側のディレクトリ構成についてあまり考えてなかった。
dom操作なしで生成することを考えると、この辺が妥当かな？

docs/
├── index.html
├── {problem_title[1]}/
│   ├── index.html
│   ├── answer.js
│   ├── judge.js
│   ├── input.txt
├── {problem_title[2]}/
│   ├── index.html
│   ├── answer.js
│   ├── judge.js
│   ├── input.txt
├── {problem_title[3]}/
│   ├── index.html
│   ├── answer.js
│   ├── judge.js
│   ├── input.txt
└── ...

htmlを適当に埋め込んでみた。
スクリプトを埋め込もうとしたけど、ちょっとリテラルに気を使いながら書くのはかなり無理がある。ちょっと考える必要がありそう。
場合によってはこれを生成するためだけのツールが必要かも。
-> どうやらJinja2というテンプレートライブラリがあるらしい。雰囲気はかなり使えそうな感じ。調査する。
どうやら使えそうな感じがする。

ChatGPTと協議。現状のProblemクラスの柔軟性を上げる。
今では、必要ないファイルも要求される仕組みになっている。これは良くない。
サブクラスの方でファイルが存在するかのboolを持つことにする。
ファイルがないのに要求されたら例外を投げる。

もう一つバリデータクラスを作って、Problemのインスタンスを受け取って整合性をチェックするようにする。
-> やった。外部からの見た目は変わってない。

そろそろJinjaを使う準備をする。
resourcesにtemplatesを置くことにする。すると、problemのディレクトリを別の場所に動かさないといけない。
-> 新しいディレクトリツリーを作る。作った。

とりあえずmainの中にJinjaを利用するコードを書く感じでやります。
基本的な戦略としては、まずガワを用意する。ガワはほんとにガワで、セクション毎にテンプレートを用意して、そこでビルドした文字列を叩き込む感じで。

というわけで
- outer.html
- section.html
を用意する。

-> 書いてて気がついたけど、answerを使うかどうかなども利用できるべきだな。あとテンプレート内で使ってる変数をどっかにリストアップすべき。
answerを使うかどうかのフラグを追加する。
実装した。validatorも実装した。get_use_answerで取得できる。これは上の情報にも追記する。

-> jinjaのテンプレートファイルを作成してみた。読み込みテストを行う。
大体できた。
適当にリテラルでビルドするコードを書いた。

pythonはutf8文字列を出力するために環境変数PYTHONUTF8を定める必要があるらしい。気を付ける。
GPTが提案してきたawaitのコードは動かんかった。そもそも非同期処理の勉強が必要。とりあえずthen()でお茶を濁しておいた。

-------------↑version1までの開発ログ

ようやく動作するところまで持ってきた。
これ以上複雑な構造を作るためにはコア部分を見直さないといけない。
主に次の点

- ディレクトリ構造をそのまま反映できるようにしたい。
- 問題ファイルとそれ以外のファイルで分類して、ディレクトリ = ファイルという関係にしたい。
- JSONに書いたパラメータとテンプレート内で使える変数を同一視したい。

アイデア: config.jsonの設定を増やす。
resources/rootを設けて、そこ以下に設置したファイルはconfig.json -> index.html、それ以外 -> そのままという風にする。

いろいろ考えて、次のような仕様がいいんじゃないかと思った。
1. ファイルはproblem、meta、other3種類に大別される。problem、metaはconfig.jsonが必須。config.jsonもいくつかの項目は必須。それ以外は自由。(ただしobjectで、stringをキーにすることは必須)
2. ディレクトリはそのままコピーする。有向グラフとしてディレクトリ構造を保持して、構築しながらファイルも構築する。
3. ディレクトリのファイルをすべてパスと内容を(bモードで)読み取り、config.jsonという名前を持つ場合は形式のチェックを入れる。これでproblem、meta、otherを判別し、それぞれを辞書にぶち込む。


JSON(ファイル名はconfig.jsonのみ許容)に必須な属性の定義
# common
- fileType: "problem"|"meta"
- templateFileName: str
- title: str

# problem
- problemTitle: str
- problemStatement: str
- inputDescription: str
- inputFilePath: str
- outputDescription: str
- outputFilePath: str
- moreInformation: str
- judgeFilePath: str

# meta
-

# 辞書へ変換された際に暗黙に定義されるもの
- path: str
- baseURL: str
- module: [str]

追記: templateに関する設定をバリデーションしようとするとそのあたりの情報も拾ってこないといけない。一旦保留。

流れとしては、
ディレクトリ解析 -> ファイル解析 -> ファイルチェック -> ディレクトリ構築 -> ファイル構築
の順にする。
ファイルの構築はルートさえわかっていればパス関連のエラーは出ないのでそこは大丈夫。

binary -> textは<class 'bytes'>に対してdecodeメソッドをしてやれば良いらしい。非utf-8環境に注意。
利便性のため、各ファイルパスは相対パス、絶対パスを許容するようにする。
ただし、絶対パスはドライブのルートではなくrootdirを起点とする。

各種チェックはちょっと仕組み化するにはシンドいのである程度のべた書きは許容する方向で。でかくなってきたらリファクタリング入れる。

jinja2のテンプレートに渡すcontextは、other、problem、meta、here、baseURL、moduleのフィールドを持つ。
hereはconfig.jsonのパスを渡す。
baseURLはルートの絶対パスを指す。(/やhttps://hogehoge/)
other、problem、metaの各エントリは自分のパスを持つ

- other : context[OTHER.value][(パス)] = {path: (パス), value: (内容)}
- problem : context[PROBLEM.value][(パス)] = dict + {path: (パス)}
- meta : context[META.value][(パス)] = dict + {path: (パス)}

の形式に従う。
それぞれpathはルートからの相対パス。

-> 大体実装した。
次: モジュールの埋め込みを許可するようにする。方法はちょっと考える。
-> modulepathみたいな定数を使って、あるディレクトリ以下のテンプレートをレンダリングしたものを辞書にぶち込んで利用できるようにする。
moduleを使わない場合を考えてNoneも許容。

-> moduleをある程度実装した
