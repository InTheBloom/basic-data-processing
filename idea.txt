手動で問題をhtmlに書き足すのはシンドイので、ディレクトリ構造を用意して、そこからhuman readableな感じに変換するプログラムを用意するのが良さそうですね。

できるだけ簡素な仕様にするのが良さそう。

案: こういうディレクトリ構造を作って、問題とジャッジを収録した静的ページを/output/に生成する。

root/
├── builder.py
├── resources/
│   ├── problem1/
│   │   ├── config.json
│   │   ├── input.txt
│   │   ├── answer.txt
│   │   └── judge.js
│   ├── problem2/
│   │   ├── config.json
│   │   ├── input.txt
│   │   └── answer.txt
│   ├── problem3/
│   │   ├── config.json
│   │   ├── input.txt
│   │   ├── answer.txt
│   │   └── judge.js
├── output/

configの内容
- title: string
- problemStatement: string
- inputDescription: string
- outputDescription: string
- moreInformation: string
- useSpecialJudge: bool

judge.jsの内容
    無名関数を書く。第一引数はユーザの解答、第二引数はこちらが渡した入力、第三引数はhtmlelementが渡される。
    ジャッジはhtmlに詳細情報を出力することが許可される。
    返り値は正答かどうかのbool値

(userinput, answer, htmlelement) => {
    return bool;
};








builderの実装

流石にスクリプトの域を超えているので、モジュール分割する。
どういうことができるべきか？をベースにオブジェクトを組み立てていく。
基本は委譲のパターンでやる。
作ってて気がついたけど、自分の仕事をするために他のメンバの情報が必要な場合がある。これをやりだすと指数的に面倒さが増加するので、Problemはあくまで一つの問題ディレクトリに関する情報を提供するハブみたいにして、これ以上の詳細なアサートとかはより上のレイヤで処理したい。

class Problem
-> 期待される振る舞い
    - 各種ファイルの自動存在チェック + 内容の読み取り(必須ファイル/必須内容がなければ例外送出)
    - json -> 各項目を関数としてreadonlyで提供
    - input/answer/judge -> strを返却

    実現のために、以下のクラスを用意
    class ProblemConfig
    class ProblemInput
    class ProblemAnswer
    class ProblemJudge


ProblemConfigを実装した。
    config.jsonはオブジェクトを仮定。
    そのJSON_CONTENTSに定義されているメンバがなかったり、型が違ったらassertで落とすようにしてる。(エラーメッセージを作るのめんどい。)
    get_〇〇メソッドを実装。
    Problem側から同名で呼んで、実装は委譲してる。(具体的なプロパティ名を隠蔽した。)

ProblemInput、ProblemAnswer、ProblemJudgeも実装した。それぞれ呼び出すとテキストを返すメソッドだけ生えてる。

chatGPTと相談してリファクタリング。以下を改善。
- ProblemConfigへの依存が強すぎるので、メンバの実際の名前定数をProblem側へ移動して、ProblemConfig側はそれを使ってassertする。ProblemConfig側は渡された名前のフィールドを返す関数だけにして、Problem側で仕事を割り振る。
定数をインポートしていたら循環してしまったので、constants.pyを定義してそこに全部おいた。
